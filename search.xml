<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo Markdown 进阶</title>
    <url>/2021/01/25/Hexo-Markdown-%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="note标签"><a class="markdownIt-Anchor" href="#note标签"></a> Note标签</h1>
<blockquote>
<p>【内容来源】Hexo自带还是NexT主题自带我不清楚，可以肯定不是插件<br />
但是我知道这种写法是常用的一种markdown写法<br />
在 <strong>VuePress</strong> 中一样的是这种写法</p>
</blockquote>
<p>通过 note 标签可以为段落 <strong>添加背景色</strong> ，用于进行内容的提示<br />
一共有如下五种： <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">请把‘class’替换成上面5个的一个 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default"><p>default</p>
</div>
<div class="note primary"><p>primary</p>
</div>
<div class="note success"><p>success</p>
</div>
<div class="note info"><p>info·</p>
</div>
<div class="note warning"><p>warning</p>
</div>
<div class="note danger"><p>danger</p>
</div>
<p>如果上述的 <code>class</code> 标签写成其他的任何内容，比如这样</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note 点击这里查看折叠的内容 %&#125;</span><br><span class="line">是不是非常的有趣，适合描述扩展的知识</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<details class="note "><summary><p>点击这里查看折叠的内容</p>
</summary>
<p>是不是非常的有趣，适合描述扩展的知识</p>

</details>
<h1 id="代码块-进阶-未完成"><a class="markdownIt-Anchor" href="#代码块-进阶-未完成"></a> 代码块 进阶 (未完成)</h1>
<div class="note warning"><p>这里还有一些插件和扩展功能还没有完全的整合好<br />
需要进一步的进行优化</p>
</div>
<ul>
<li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>
<li>title：代码块标题，将会显示在左上角</li>
<li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li>
<li>link text：链接名称，指定 url 后有效，将会显示在右上角</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96; [language] [title] [url] [link text]</span><br><span class="line">code snippet</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>一个最简单的例子</p>
<figure class="highlight yml"><figcaption><span>_config.yml diff</span></figcaption><table><tr><td class="code"><pre><span class="line"> <span class="attr">highlight:</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">line_number:</span> <span class="literal">false</span></span><br><span class="line"><span class="bullet">-</span>  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">tab_replace:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>line_number:false</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">HelloWorldClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.Out.printl(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>写作</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Self Reflection / 2020.08~2021.02</title>
    <url>/2021/01/25/Self-Reflection-2020-08-2021-02/</url>
    <content><![CDATA[<blockquote>
<p>In the end of a semester, a student will be requested to send a self reflection email with a sample as below:</p>
<p>For the self reflection, I hope you can answer the following questions:</p>
<ul>
<li>
<p>Did you work hard enough over the past period (i.e., past semester)? If so, illustrate the supporting evidence. If not, explain why you would have such situation and explain how you would be able to improve the situation in the next period (i.e., next semester) (with concrete action plans or things)?</p>
</li>
<li>
<p>On what aspects did you work in a <strong>desirable way</strong> over the the past period? Illustrate the details.</p>
</li>
<li>
<p>On what aspects did you work in an <strong>undesirable way</strong> over the past period? Illustrate the details. Also explain why you would have such situation and explain how you would be able to improve the situation in the upcoming period (with concrete action plans or things)?</p>
</li>
<li>
<p>Any other comments you would like to self reflect on your research activities, styles/processes, skills, and/or accomplishments or anything else in the past period, especially with respect to work hard, work smart, and work wise?</p>
</li>
</ul>
</blockquote>
<p><font size=6>This</font> semester, I think I have worked hard enough, but there is still space for improvement. From the time I chose the research topic of Taobao intelligent stress testing, I knew that it would be a highly engineered project that required a clear schedule for coding. In this semester, I was able to push the project every week according to the plan set from last week group meeting. This is an important prerequisite for ensuring the completion of the project in the three months. I think I have pushed myself enough. However, in the process of this project, due to my poor definition and understanding of the problem, I actually waste a lot of time, including trying inappropriate models (such as LightGBM, GRU and later I found this problem is actually multivariate nonlinear regression, which means all of these models do not work), and trying some approaches that are not actually related to the project (such as fuzz testing). Although these works can be regarded as a valuable experiment from my perspective, but it can also be regarded as “useless work”, and I think it is a flag of “not working hard enough”. I did not think sufficiently in the early stages, which led to this “useless work”.</p>
<p><font size=6>I</font> think I worked in a desirable way with the following two aspects: First for my internship in Alibaba, the weekly CI/CD process is my best working status. Second, since joining the ASE group, my research topic gradually focus on software engineering. Besides my internship, I began to read papers independently, especially those that were not completely related to my work, such as quantum program testing, and some papers on GUI Testing (recently I’m skimming all papers in ICSE in the past five years, and taking some notes based on my understanding). I confirm that it is very meaningful to read as many excellent papers as possible after listening to Prof. Xusheng Xiao’s sharing this week.</p>
<p><font size=6>I</font> think there are two aspects that I’m not satisfied withmyself. <strong>The first is that the time utilization is relatively low at work</strong>. I tried deep learning models and wrote preprocessing code for about a month, and took three weeks parallelizing my training process , and did engineering implementation for a month. There are three factors that lead to low efficiency: complex engineering structure, slow implementation speed, and unfamiliarity with theories. The first part is actually inevitable. For scalability and well-designed structure, I’ve sacrificed some time for encapsulating and testing. For the second and third parts, I think there is definitely room for improvement. Basically, I spend half of my time learning theories and code writings (such as selecting models, learning to write async python, web frameworks etc.), a quarter of my time testing code demos to understand knowledge and confirm code result, and the last quarter is the actual engineering part. <strong>The second is that the free time is not fully utilized</strong>, because a lot of time is spent at work and no extra time is reserved for me to learn other things. Specifically, I only read a quarter of the basic tutorials of Rust, and I did not read more than 10 papers outside of my work.</p>
<p><font size=6>Because</font> there is no course this semester, I can concentrate on some things I want to do. In my spare time, I started to read the source code of third-party libraries in Python (Tensorflow, Subprocess, Asyncio, Shutil etc.), so I can deeply understand their inner logic and master how to use it. My mathematical basis is not good, so I am also looking at some mathematical derivation related to data science (especially machine learning and linear regression analysis), although some parts are still difficult for me, but there is nothing bad about understanding the principles. In addition, under the recommendation of developers in BUPT, I started to learn the Rust programming language. Compared with other languages, the learning curve of this language is quite steep. I have not yet written projects in Rust, but at this stage I think the design and concept of Rust is more suitable for software engineering research than other languages such as C. Also I build my first “In Use” homepage on github (I had some personal homepage before, but they are no longer maintained just because I’m too lazy), hoping to note down some of the knowledge that I’ve learned, and gain experience.</p>
<p><font size=6>In</font> order to quickly index, I just put solid action plans here.</p>
<ul>
<li><strong>For work time utilization in UNDESIRABLE part</strong>
<ul>
<li>Note down most of the knowledge I studied into web docs, avoid forgetting and reduce time for searching and learning again. The specific action is to ensure that my homepage is updated at a regular rate. Although it is a stupid method, it is still extremely effective for me. (Work wise? I think.)</li>
<li>In terms of speed, I need more practice, and a certain amount of code must be guaranteed. The actual code of project in Alibaba intern has about 15 files, with above 2,000 LOC. The playground code for functional testing has about 5 files, with above 1,000 LOC. At least the LOC number for the next semester cannot be lower than this semester.</li>
</ul>
</li>
<li><strong>For free time allocation in UNDESIRABLE part</strong>:
<ul>
<li>My current plan is to use morning time to read papers and learn new knowledge (such as Rust 😄) , just before working time is fine. So that my free learning time will not be squeezed by working time.</li>
<li>The time allocation at weekends has also improved to a certain extent. I now reserve Saturday as my leisure time, and regard Sunday as a weekday. I will try this schedule for a few months to see if there is any actual effect.</li>
</ul>
</li>
<li><strong>For work hard&amp;wise part:</strong>
<ul>
<li>For the scenario of determining solution, it is necessary to conduct as small experiments as possible, not engineering-level experiments, otherwise it will take a lot of time to do engineering stuff. A simple experiment is needed before the large one.</li>
<li>For scenario where “multiple solutions have been determined and all need to be experimented”: as above, improve my implementation speed.</li>
<li>In addition, I must fully understand the problem before I solve it. I personally find that it’s helpful just describe to my goals and solutions with others and will find some flaws in my problem definition. Let ideas go through a “peer review”.</li>
</ul>
</li>
</ul>
<p><font size=6><strong>ABOVE ALL: WRITE MORE, SYNC MORE, DON’T BE LAZY.</strong></font></p>
<p>Honored to join the ASE group and keep improving myself !</p>
]]></content>
      <tags>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/26/hello-world/</url>
    <content><![CDATA[<h2 id="我个人常用的指令"><a class="markdownIt-Anchor" href="#我个人常用的指令"></a> 我个人常用的指令</h2>
<h2 id="一键合集慎用"><a class="markdownIt-Anchor" href="#一键合集慎用"></a> 一键合集（慎用）</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">git branch                         # 查看本地分支</span><br><span class="line">git branch -r                      # 查看远程分支</span><br><span class="line">git push origin allfile:allfile    # 将本地allfile分支push到远程allfile分支</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="hexo的服务器调试模式"><a class="markdownIt-Anchor" href="#hexo的服务器调试模式"></a> hexo的服务器调试模式</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<h3 id="hexo内容部署到线上环境"><a class="markdownIt-Anchor" href="#hexo内容部署到线上环境"></a> hexo内容部署到线上环境</h3>
<div class="note info"><p>这里上传的是经过生成的文件<br />
请一定要在hexo初始配置中完成自动git的配置才能用这个命令</p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="hexo原始文件部署到其他分支"><a class="markdownIt-Anchor" href="#hexo原始文件部署到其他分支"></a> hexo原始文件部署到其他分支</h3>
<div class="note info"><p>请确认分支情况</p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch                         # 查看本地分支</span><br><span class="line">git branch -r                      # 查看远程分支</span><br><span class="line">git push origin allfile:allfile    # 将本地allfile分支push到远程allfile分支</span><br></pre></td></tr></table></figure>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>键盘layout</title>
    <url>/2020/11/26/keybord/</url>
    <content><![CDATA[<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\sum (a+b)_{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>行内测试<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>u</mi><mi>n</mi><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">func_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<h1 id="75"><a class="markdownIt-Anchor" href="#75"></a> 75</h1>
<p><a href="https://imgchr.com/i/DBnJe0"><img src="https://s3.ax1x.com/2020/11/26/DBnJe0.md.png" alt="DBnJe0.md.png" /></a></p>
<h1 id="60"><a class="markdownIt-Anchor" href="#60"></a> 60</h1>
<p><a href="https://imgchr.com/i/DBn8Lq"><img src="https://s3.ax1x.com/2020/11/26/DBn8Lq.md.png" alt="DBn8Lq.md.png" /></a></p>
<h1 id="980"><a class="markdownIt-Anchor" href="#980"></a> 980</h1>
<p><a href="https://imgchr.com/i/DBn3yn"><img src="https://s3.ax1x.com/2020/11/26/DBn3yn.md.png" alt="DBn3yn.md.png" /></a></p>
<h1 id="alice"><a class="markdownIt-Anchor" href="#alice"></a> Alice</h1>
<p><a href="https://imgchr.com/i/DBn1Qs"><img src="https://s3.ax1x.com/2020/11/26/DBn1Qs.md.png" alt="DBn1Qs.md.png" /></a></p>
<h1 id="minila"><a class="markdownIt-Anchor" href="#minila"></a> minila</h1>
<p><a href="https://imgchr.com/i/DBnQzj"><img src="https://s3.ax1x.com/2020/11/26/DBnQzj.md.png" alt="DBnQzj.md.png" /></a></p>
<h1 id="65"><a class="markdownIt-Anchor" href="#65"></a> 65</h1>
<p><a href="https://imgchr.com/i/DBnMWQ"><img src="https://s3.ax1x.com/2020/11/26/DBnMWQ.md.png" alt="DBnMWQ.md.png" /></a></p>
]]></content>
  </entry>
  <entry>
    <title>常用站点</title>
    <url>/2020/11/26/%E5%B8%B8%E7%94%A8%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<h1 id="实用工具"><a class="markdownIt-Anchor" href="#实用工具"></a> 实用工具</h1>
<p>在线LaTeX公式编辑器：<a href="https://www.latexlive.com/">https://www.latexlive.com/</a></p>
<p>超详细hexo建站：<a href="https://segmentfault.com/a/1190000017986794">https://segmentfault.com/a/1190000017986794</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>网址收藏</tag>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>a fast view of FastAPI</title>
    <url>/2021/01/07/a-fast-view-of-FastAPI/</url>
    <content><![CDATA[<h1 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h1>
<p>这个教程是</p>
<h1 id="必要的下载"><a class="markdownIt-Anchor" href="#必要的下载"></a> 必要的下载</h1>
<p>第一个是自己，第二个是服务器，第三个是弄Form和文件的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn[standard]</span><br><span class="line">pip install python-multipart</span><br></pre></td></tr></table></figure>
<h1 id="如何启动应用"><a class="markdownIt-Anchor" href="#如何启动应用"></a> 如何启动应用</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>
<p>其中main是你的py文件名称，可以是绝对路径，app是在内部注册的应用</p>
<h1 id="知识结构"><a class="markdownIt-Anchor" href="#知识结构"></a> 知识结构</h1>
<h1 id="快速启动"><a class="markdownIt-Anchor" href="#快速启动"></a> 快速启动</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="路径参数和查询参数"><a class="markdownIt-Anchor" href="#路径参数和查询参数"></a> 路径参数和查询参数</h1>
<div class="note info"><p>💯 除非声明了是Optinal，否则没有默认值的参数都是必须的参数</p>
<p>引自（知名摸鱼专家：NitrogenousFish）</p>
</div>
<h2 id="路径参数"><a class="markdownIt-Anchor" href="#路径参数"></a> 路径参数</h2>
<h3 id="声明路径参数"><a class="markdownIt-Anchor" href="#声明路径参数"></a> 声明路径参数</h3>
<ol>
<li>在<strong>函数装饰器</strong>里面加上<code>&#123;var&#125;</code></li>
<li>在下方函数中的参数中，填写变量名称和类型，用冒号分割<code>(var:str)</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user</span>(<span class="params">user_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>🔑 要点：路径参数的<strong>顺序很重要</strong>：如果把下面的<code>/me</code>和<code>/&#123;user_id&#125;</code>写反了，那么在请求<code>/me</code>的时候，会被<code>/&#123;user_id&#125;</code>先获取到</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/me&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user_me</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;the current user&quot;</span>&#125;</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user</span>(<span class="params">user_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: user_id&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包含路径的路径参数支持但是平常最好别这么写"><a class="markdownIt-Anchor" href="#包含路径的路径参数支持但是平常最好别这么写"></a> 包含路径的路径参数：支持，但是平常最好别这么写</h3>
<p>详情参见：<a href="https://fastapi.tiangolo.com/zh/tutorial/path-params/#_14">https://fastapi.tiangolo.com/zh/tutorial/path-params/#_14</a></p>
<h2 id="查询参数不是路径参数的参数"><a class="markdownIt-Anchor" href="#查询参数不是路径参数的参数"></a> 查询参数：不是路径参数的参数</h2>
<p>【定义】声明不属于路径参数的其他函数参数时，它们将被自动解释为&quot;查询字符串&quot;参数</p>
<p><strong>查询字符串是键值对的集合，这些键值对位于 URL 的 <code>？</code> 之后，并以 <code>&amp;</code> 符号分隔。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;items&#x2F;?skip&#x3D;0&amp;limit&#x3D;10</span><br></pre></td></tr></table></figure>
<p>他们原始都是str类型，当为它们声明了 Python 类型之后，就能够进行类型转换，并且针对该类型进行校验</p>
<h3 id="声明查询参数"><a class="markdownIt-Anchor" href="#声明查询参数"></a> 声明查询参数</h3>
<p>声明方法和路径参数第二步一样，就是不会在函数装饰器里面加上对应的内容</p>
<h3 id="查询参数-可选与默认值"><a class="markdownIt-Anchor" href="#查询参数-可选与默认值"></a> 查询参数 可选与默认值</h3>
<p>查询参数如果有，就是对应的值；如果没有查询，就会使用默认值</p>
<p>【<strong>声明查询参数可选</strong>】：声明为Optinal，设置默认值为None</p>
<p>【声明查询参数默认值】：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line">...				<span class="comment"># 这里的 q 和 short 都是可选参数</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span>, q: Optional[<span class="built_in">str</span>] = <span class="literal">None</span>, short: <span class="built_in">bool</span> = <span class="literal">False</span></span>):</span></span><br></pre></td></tr></table></figure>
<h3 id="查询参数必选"><a class="markdownIt-Anchor" href="#查询参数必选"></a> 查询参数必选</h3>
<p>【声明查询参数必选】：就不要设定默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user_item</span>(<span class="params">item_id: <span class="built_in">str</span>, needy: <span class="built_in">str</span></span>):</span>		<span class="comment"># 这里的needy就是必选参数			</span></span><br></pre></td></tr></table></figure>
<h3 id="查询参数-必选-可选-默认值-总结"><a class="markdownIt-Anchor" href="#查询参数-必选-可选-默认值-总结"></a> 查询参数 必选-可选-默认值 总结</h3>
<p>在这个例子中，有3个查询参数：</p>
<ul>
<li><code>needy</code>，一个必需的 <code>str</code> 类型参数。</li>
<li><code>skip</code>，一个默认值为 <code>0</code> 的 <code>int</code> 类型参数。</li>
<li><code>limit</code>，一个可选的 <code>int</code> 类型参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_user_item</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    item_id: <span class="built_in">str</span>, needy: <span class="built_in">str</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: Optional[<span class="built_in">int</span>] = <span class="literal">None</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>):</span></span><br><span class="line">    item = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;needy&quot;</span>: needy, <span class="string">&quot;skip&quot;</span>: skip, <span class="string">&quot;limit&quot;</span>: limit&#125;</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<h1 id="请求体-post"><a class="markdownIt-Anchor" href="#请求体-post"></a> 请求体 （POST）</h1>
<p>请求体：客户端发送给 API 的数据</p>
<p>相应体：API 发送给客户端的数据</p>
<p>请求体除了POST还有PUT，DELETE，PATCH等</p>
<h2 id="创建请求体pydantic"><a class="markdownIt-Anchor" href="#创建请求体pydantic"></a> 创建请求体——Pydantic</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel					<span class="comment">#首先，你需要从 pydantic 中导入 BaseModel：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span>							<span class="comment">#然后，将你的数据模型声明为继承自 BaseModel 的类</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: Optional[<span class="built_in">float</span>] = <span class="literal">None</span>					<span class="comment">#使用标准的 Python 类型来声明所有属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="comment"># item_id路径参数，必选；item请求体，必选；q查询参数，可选&amp;默认None</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item, q: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    result = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, **item.<span class="built_in">dict</span>()&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        result.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h3 id="如何解析-路径参数-查询参数-请求体"><a class="markdownIt-Anchor" href="#如何解析-路径参数-查询参数-请求体"></a> 如何解析 路径参数 查询参数 请求体</h3>
<p>函数参数将依次按如下规则进行识别：</p>
<ul>
<li>如果在<strong>路径</strong>中也声明了该参数，它将被用作路径参数。</li>
<li>如果参数属于<strong>单一类型</strong>（比如 <code>int</code>、<code>float</code>、<code>str</code>、<code>bool</code> 等）它将被解释为<strong>查询</strong>参数。</li>
<li>如果参数的类型被声明为一个 <strong>Pydantic 模型</strong>，它将被解释为<strong>请求体</strong>。</li>
</ul>
<h3 id="pydantic模型套娃请求体-嵌套模型"><a class="markdownIt-Anchor" href="#pydantic模型套娃请求体-嵌套模型"></a> Pydantic模型套娃（请求体-嵌套模型）</h3>
<p>不细嗦了，直接看吧，和你想的差不多～</p>
<p>包含有model套model，model套List(model)，就是List(model)</p>
<p><a href="https://fastapi.tiangolo.com/zh/tutorial/body-nested-models/">https://fastapi.tiangolo.com/zh/tutorial/body-nested-models/</a></p>
<h3 id="pydantic模型注释强化模式的额外信息-例子"><a class="markdownIt-Anchor" href="#pydantic模型注释强化模式的额外信息-例子"></a> Pydantic模型注释强化（模式的额外信息 - 例子）</h3>
<p><a href="https://fastapi.tiangolo.com/zh/tutorial/schema-extra-example/">https://fastapi.tiangolo.com/zh/tutorial/schema-extra-example/</a></p>
<p>推荐大概弄懂了全部内容再来看。和运行功能无关，是注释和可读性的一个例子</p>
<h2 id="创建请求体body-请求体中的单一值"><a class="markdownIt-Anchor" href="#创建请求体body-请求体中的单一值"></a> 创建请求体——Body 请求体中的单一值</h2>
<h3 id="body基础单独键"><a class="markdownIt-Anchor" href="#body基础单独键"></a> Body基础——单独键</h3>
<p>当你的请求体中只需要一个单独数值（请求中的一个单独的键）的时候，不用再建一个class了，直接<code>from fastapi import Body</code></p>
<p>这样的一个程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: Optional[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    full_name: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    item_id: <span class="built_in">int</span>, item: Item, user: User, importance: <span class="built_in">int</span> = Body(<span class="params">...</span>)</span></span></span><br><span class="line"><span class="function"><span class="params"></span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item, <span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;importance&quot;</span>: importance&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<p>期望到这样的请求体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;item&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Foo&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;The pretender&quot;,</span><br><span class="line">        &quot;price&quot;: 42.0,</span><br><span class="line">        &quot;tax&quot;: 3.2</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;user&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;dave&quot;,</span><br><span class="line">        &quot;full_name&quot;: &quot;Dave Grohl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;importance&quot;: 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="给单个pydantic嵌入请求体参数"><a class="markdownIt-Anchor" href="#给单个pydantic嵌入请求体参数"></a> 给单个Pydantic嵌入请求体参数</h3>
<p>假设<strong>你只有一个</strong>来自 Pydantic 模型 <code>Item</code> 的请求体参数 <code>item</code>，你想要如下形式的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;item&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Foo&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;The pretender&quot;,</span><br><span class="line">        &quot;price&quot;: 42.0,</span><br><span class="line">        &quot;tax&quot;: 3.2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而不是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Foo&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;The pretender&quot;,</span><br><span class="line">    &quot;price&quot;: 42.0,</span><br><span class="line">    &quot;tax&quot;: 3.2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你需要在最后添加等于Body，并且在最后加上embed=True：<code>item: Item = Body(..., embed=True)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: Optional[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span>		<span class="comment"># 看这里～</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<h1 id="参数校验路径参数和查询参数"><a class="markdownIt-Anchor" href="#参数校验路径参数和查询参数"></a> 参数校验（路径参数和查询参数）</h1>
<p>🔑 <strong>重点</strong>：</p>
<ul>
<li>
<p><strong>查询参数是Query类</strong></p>
</li>
<li>
<p><strong>路径参数是Path类，</strong></p>
</li>
<li>
<p><strong>Body类请求体-内部自带校验接口</strong></p>
</li>
<li>
<p>**Pydantic请求体-用用 Pydantic 的 <code>Field</code>**类在Pydantic模型内部声明校验和元数据</p>
</li>
</ul>
<p>下文所有内容将以Query类为例，默认都是查询参数</p>
<h2 id="参数校验基础用法查询"><a class="markdownIt-Anchor" href="#参数校验基础用法查询"></a> 参数校验基础用法——查询</h2>
<ul>
<li>
<p>首先导入Query</p>
</li>
<li>
<p>把Query设置为默认值</p>
<ul>
<li>其中<code>Query(None)</code>等价于<code>None</code>，随后我们就可以传递更多的参数给<code>Query()</code></li>
<li>可以给Query带有多个校验内容：<code>Query(None, min_length=3, max_length=50)</code></li>
<li>可以定义一个参数值需要匹配的正则表达式<code>Query(None, min_length=3, max_length=50, regex=&quot;^fixedquery$&quot;)</code></li>
<li>可以进行数值校验：
<ul>
<li><code>item_id: int = Path(..., title=&quot;The ID of the item to get&quot;, ge=1)</code>路径参数要大于等于1</li>
<li>ge大于等于，gt大于，eq等于，le小于等于，lt小于</li>
</ul>
</li>
<li>Query中<strong>第一个参数是默认值</strong>：这里None就是这个Query的默认值</li>
<li>如果这个<strong>参数是必须的</strong>，那么默认参数设置为<code>...</code> （python关键字：省略号）：如<code>Query(..., min_length=3)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>🔑 <strong>重点</strong></p>
<p>路径参数总是必需的，因为它必须是路径的一部分。</p>
<p>所以，你应该在声明时使用 <code>...</code> 将其标记为必需参数。</p>
<p>然而，即使你使用 <code>None</code> 声明路径参数或设置一个其他默认值也不会有任何影响，它依然会是必需参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query			<span class="comment"># 首先导入Query</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: Optional[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, max_length=<span class="number">50</span></span>)</span>):</span>	<span class="comment">#把Query设置为默认值</span></span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<h2 id="参数校验的写法顺序排列"><a class="markdownIt-Anchor" href="#参数校验的写法顺序排列"></a> 参数校验的写法顺序排列</h2>
<p>⚠️ 如果你将带有「默认值」的参数放在没有「默认值」的参数之前，Python 将会报错。</p>
<p>如果同时混有路径参数和查询参数（没有默认值），路径参数有Path进行校验，但是查询参数没有Query，这样写没有问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># q 是没有默认值的查询参数，item_id是有默认值的路径参数</span></span><br><span class="line"><span class="comment"># 这种写法没有问题</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="built_in">str</span>, item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span></span>)</span>):</span></span><br></pre></td></tr></table></figure>
<p>但是如果反过来，路径参数放在前面，就会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span>, q: <span class="built_in">str</span></span>)</span>):</span></span><br><span class="line"><span class="comment"># SyntaxError: non-default argument follows default argument</span></span><br></pre></td></tr></table></figure>
<p>解决方法是这样的：加一个<code>*</code>告诉python解释器，把后面的所有参数当成<code>kwargs</code>来看待。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">*, item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span></span>), q: <span class="built_in">str</span></span>):</span></span><br></pre></td></tr></table></figure>
<p><strong>还是推荐把这些没有默认值的可选项都设置上一个默认值吧，反正是我我就这么干（要是完全不关心性能的话）</strong></p>
<h2 id="校验参数列表多值-基础用法"><a class="markdownIt-Anchor" href="#校验参数列表多值-基础用法"></a> 校验参数列表/多值 基础用法</h2>
<blockquote>
<p>💯 想怎么套娃，就怎么套娃~</p>
<p>引自（知名摸鱼专家：NitrogenousFish）</p>
</blockquote>
<p><code>Optional[List[str]] = Query(None)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Optional</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Query</span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: Optional[List[<span class="built_in">str</span>]] = Query(<span class="params"><span class="literal">None</span></span>)</span>):</span>		<span class="comment"># 看这里看这里</span></span><br><span class="line">    query_items = &#123;<span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line">    <span class="keyword">return</span> query_items</span><br></pre></td></tr></table></figure>
<p>假设请求的URL是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8000&#x2F;items&#x2F;?q&#x3D;foo&amp;q&#x3D;bar</span><br></pre></td></tr></table></figure>
<p>那么得到的响应就是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;q&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="校验参数列表多值-默认值"><a class="markdownIt-Anchor" href="#校验参数列表多值-默认值"></a> 校验参数列表/多值 默认值</h2>
<p><code>Query([&quot;foo&quot;, &quot;bar&quot;])</code></p>
<p>比如这样～</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: List[<span class="built_in">str</span>] = Query(<span class="params">[<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>]</span>)</span>):</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="built_in">list</span> = Query(<span class="params">[]</span>)</span>):</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是：<code>List[int]</code> 将检查（并记录到文档）列表的内容必须是整数。但是单独的 <code>list</code> 不会。</p>
<h2 id="field-pydantic参数校验举例"><a class="markdownIt-Anchor" href="#field-pydantic参数校验举例"></a> Field-Pydantic参数校验举例</h2>
<p><strong>首先导入Field：因为是在pydantic内部校验，所以不是从fastapi导入而是pydantic</strong></p>
<p>然后用法剩下的都是一样的：看Item.price这里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body, FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field		<span class="comment">#导入Field</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: Optional[<span class="built_in">str</span>] = Field(</span><br><span class="line">        <span class="literal">None</span>, title=<span class="string">&quot;The description of the item&quot;</span>, max_length=<span class="number">300</span></span><br><span class="line">    )</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>, description=<span class="string">&quot;The price must be greater than zero&quot;</span>)</span><br><span class="line">    tax: Optional[<span class="built_in">float</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<h2 id="一些有关参数校验的技术细节"><a class="markdownIt-Anchor" href="#一些有关参数校验的技术细节"></a> 一些有关参数校验的技术细节</h2>
<p>实际上，<code>Query</code>、<code>Path</code> 和其他你将在之后看到的类，创建的是由一个共同的 <code>Params</code> 类派生的子类的对象，该共同类本身又是 Pydantic 的 <code>FieldInfo</code> 类的子类。</p>
<p>Pydantic 的 <code>Field</code> 也会返回一个 <code>FieldInfo</code> 的实例。</p>
<p><code>Body</code> 也直接返回 <code>FieldInfo</code> 的一个子类的对象。还有其他一些你之后会看到的类是 <code>Body</code> 类的子类。</p>
<p>请记住当你从 <code>fastapi</code> 导入 <code>Query</code>、<code>Path</code> 等对象时，他们实际上是返回特殊类的函数。</p>
<h2 id="校验参数高级内容"><a class="markdownIt-Anchor" href="#校验参数高级内容"></a> 校验参数高级内容</h2>
<p><a href="https://fastapi.tiangolo.com/zh/tutorial/query-params-str-validations/#_9">https://fastapi.tiangolo.com/zh/tutorial/query-params-str-validations/#_9</a></p>
<ul>
<li>添加更多的参数信息 title，description</li>
<li>参数别名 alias</li>
<li>指定参数将会被弃用 deprecated</li>
</ul>
<h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1>
<h1 id="有关类型想说的一些事情"><a class="markdownIt-Anchor" href="#有关类型想说的一些事情"></a> 有关类型想说的一些事情</h1>
<h2 id="创建枚举类型"><a class="markdownIt-Anchor" href="#创建枚举类型"></a> 创建枚举类型</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="comment">#枚举类型继承自str和Enum；继承str，API文档将能够知道这些值必须为 string 类型并且能够正确地展示出来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelName</span>(<span class="params"><span class="built_in">str</span>, Enum</span>):</span>			</span><br><span class="line">    alexnet = <span class="string">&quot;alexnet&quot;</span></span><br><span class="line">    resnet = <span class="string">&quot;resnet&quot;</span></span><br><span class="line">    lenet = <span class="string">&quot;lenet&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 用法</span></span><br><span class="line">a = <span class="string">&#x27;alexnet&#x27;</span></span><br><span class="line">print(a == ModelName.alexnet)       <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">type</span>(ModelName.alexnet))      <span class="comment"># &lt;enum &#x27;ModelName&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="pydantic支持更多的类型"><a class="markdownIt-Anchor" href="#pydantic支持更多的类型"></a> pydantic支持更多的类型</h2>
<p><strong>基础：</strong></p>
<p>常见的int, bool, str都没有什么问题</p>
<p>在typing中impost List Set之类的类型也没有什么问题</p>
<p><strong>进阶：</strong></p>
<p>比如UUID，bytes，datetime.datetime，datetime.date</p>
<p>更全的pydantic数据类型看这里：<a href="https://pydantic-docs.helpmanual.io/usage/types/">https://pydantic-docs.helpmanual.io/usage/types/</a></p>
<h1 id="一些有关http的事情但是作为一个api没有什么需要关心的地方"><a class="markdownIt-Anchor" href="#一些有关http的事情但是作为一个api没有什么需要关心的地方"></a> 一些有关HTTP的事情但是作为一个API没有什么需要关心的地方</h1>
<p>【cookie参数】<a href="https://fastapi.tiangolo.com/zh/tutorial/cookie-params/">https://fastapi.tiangolo.com/zh/tutorial/cookie-params/</a></p>
<p>【响应模型】<a href="https://fastapi.tiangolo.com/zh/tutorial/response-model/">https://fastapi.tiangolo.com/zh/tutorial/response-model/</a></p>
<p>【额外的模型】<a href="https://fastapi.tiangolo.com/zh/tutorial/extra-models/">https://fastapi.tiangolo.com/zh/tutorial/extra-models/</a></p>
<p>【响应状态码】<a href="https://fastapi.tiangolo.com/zh/tutorial/response-status-code/">https://fastapi.tiangolo.com/zh/tutorial/response-status-code/</a></p>
<p>一看就懂，就这么写：<code>@app.post(&quot;/items/&quot;, status_code=201)</code></p>
<p>为了自动代码补全，可以这么写：fastapi.status</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, status</span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">blabla</span>():</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>【表单】<a href="https://fastapi.tiangolo.com/zh/tutorial/request-forms/">https://fastapi.tiangolo.com/zh/tutorial/request-forms/</a></p>
<p>提供API不需要响应表单（确信）</p>
<h2 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h2>
<p>有两个接口，一个是byte，一个是<strong>UploadFile</strong>，推荐用后一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, File, UploadFile</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 木大木大</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/files/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_file</span>(<span class="params">file: <span class="built_in">bytes</span> = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_size&quot;</span>: <span class="built_in">len</span>(file)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针不戳～</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/uploadfile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_upload_file</span>(<span class="params">file: UploadFile = File(<span class="params">...</span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;filename&quot;</span>: file.filename&#125;</span><br></pre></td></tr></table></figure>
<p>UploadFile有一些属性和异步方法～点这里看简介</p>
<p><a href="https://fastapi.tiangolo.com/zh/tutorial/request-files/#uploadfile">https://fastapi.tiangolo.com/zh/tutorial/request-files/#uploadfile</a></p>
<h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1>
<p>后面还有一些内容，我觉得比较有意思的是JSON，Middleware，和Debugging</p>
<p>JSON大概说了是怎么处理JSON请求之类的。</p>
<p>Middleware相当于是一个批处理，能够在enduser和服务器之间拦下来做统一的输入预处理和输出预处理</p>
<p>Debugging讲了怎么在IDE里面帮你调试</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/handling-errors/">Handling Errors</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/path-operation-configuration/">Path Operation Configuration</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/encoder/">JSON Compatible Encoder</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/body-updates/">Body - Updates</a></li>
<li>Dependencies
<ul>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/">Dependencies - First Steps</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/classes-as-dependencies/">Classes as Dependencies</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/sub-dependencies/">Sub-dependencies</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/dependencies-in-path-operation-decorators/">Dependencies in path operation decorators</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/global-dependencies/">Global Dependencies</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/dependencies/dependencies-with-yield/">Dependencies with yield</a></li>
</ul>
</li>
<li>Security
<ul>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/security/">Security Intro</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/security/first-steps/">Security - First Steps</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/security/get-current-user/">Get Current User</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/security/simple-oauth2/">Simple OAuth2 with Password and Bearer</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/security/oauth2-jwt/">OAuth2 with Password (and hashing), Bearer with JWT tokens</a></li>
</ul>
</li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/middleware/">Middleware</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/cors/">CORS (Cross-Origin Resource Sharing)</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/sql-databases/">SQL (Relational) Databases</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/bigger-applications/">Bigger Applications - Multiple Files</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/background-tasks/">Background Tasks</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/metadata/">Metadata and Docs URLs</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/static-files/">Static Files</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/testing/">Testing</a></li>
<li><a href="https://fastapi.tiangolo.com/zh/tutorial/debugging/">Debugging</a><a href="https://fastapi.tiangolo.com/zh/tutorial/debugging/">https://fastapi.tiangolo.com/zh/tutorial/debugging/</a>)</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
